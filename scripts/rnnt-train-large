#!/usr/bin/env python

import sys
from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os
import logging

variants = ['infer-offline', 'train-large']

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_notp =  U.arch.arch_factory('hier', dict(
    vbits=512,
    tpeng=False,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, CU.base_membw, 1.0, 1.0, 1.0)
db = U.simdb.SimDb(arch)
db_notp = U.simdb.SimDb(arch_notp)
nv = U.nvdb.NvDb()

app = CU.apps['rnnt-train-large']
app_pp = U.apps.post_process_train_app(app)

our_utils = [
    max(db[op, arch_ext].util, db_notp[op, arch_ext].util)
    for op in app_pp.unique_ops
]
nv_utils = [nv[op, None].util for op in app_pp.unique_ops]


a100_perf = U.nvdb.get_perf('rnnt', 'train', 'large')
a100_util = U.nvdb.get_util('rnnt', 'train', 'large')
our_perf = db.perf(app, arch_ext)
our_perf_notp = db_notp.perf(app, arch_ext)
print(f'A100 B=16 performance: {a100_perf} ({100*a100_util:.2f} %)')
print(f'UPCYCLE B=16 performance: {our_perf} (TP) {our_perf_notp} (no TP)')

for i, op in enumerate(app_pp.unique_ops):
    print(op, op.flops, np.round(db[op, arch_ext].util, 5), np.round(db_notp[op, arch_ext].util, 5), np.round(nv_utils[i], 5))


