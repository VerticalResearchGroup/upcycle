#!/usr/bin/env python

import sys
from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os
import logging

variants = ['infer-offline', 'train-large']

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_notp =  U.arch.arch_factory('hier', dict(
    vbits=512,
    tpeng=False,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, 1.0, 1.0, 1.0)
db = U.simdb.SimDb(arch)
db_notp = U.simdb.SimDb(arch_notp)
nv = U.nvdb.NvDb()

fig = plt.figure(figsize=(14, 5))
axs = fig.subplots(len(variants), len(CU.appnames), sharex=False, sharey=False)
plt.subplots_adjust(wspace=0.01)

WIDTH = 1.0

for i, appname in enumerate(CU.appnames):
    for j, variant in enumerate(variants):
        app = CU.apps[f'{appname}-{variant}']
        if 'train' in variant: app = U.apps.post_process_train_app(app)

        unique_ops = []
        for op in app:
            if op not in unique_ops: unique_ops.append(op)

        ax = axs[j, i]
        if i == 0: ax.set_ylabel(variant)
        if j == len(variants) - 1: ax.set_xlabel(appname)

        our_utils = [
            max(db[op, arch_ext].util, db_notp[op, arch_ext].util)
            for op in unique_ops
        ]
        nv_utils = [nv[op, None].util for op in unique_ops]

        if f'{appname}-{variant}' == 'rnnt-train-large':
            for i, op in enumerate(unique_ops):
                print(op, op.flops, db[op, arch_ext].util, db_notp[op, arch_ext].util, nv_utils[i])


        # flops = np.array([float(op.flops) for op in app.oplist])
        # xs = np.cumsum(flops) - flops[0]
        # xs = xs / xs[-1]
        # xs = np.linspace(0, 1, len(app.oplist))
        xs = np.arange(len(our_utils)) * 3
        our_bars = ax.bar(xs + 0.5, our_utils, WIDTH, label='UPCYCLE-BASE Utilization')
        nv_bars = ax.bar(xs + 1.5, nv_utils, WIDTH, label='A100 Utilization')

        ax.set_xlim([0, len(our_utils) * 3])
        ax.set_xticks([])

# plt.xlim([0, 1])
# plt.ylim([0, 1])
# plt.xticks([])
plt.tight_layout()

plt.figlegend(
    handles=[our_bars, nv_bars],
    loc='lower center',
    # bbox_to_anchor=(0.0, 0),
    ncol=2)

plt.subplots_adjust(bottom=0.12)
os.makedirs('./figs', exist_ok=True)
plt.savefig('figs/compare_by_layers.pdf')


