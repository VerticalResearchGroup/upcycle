#!/usr/bin/env python

import upcycle as U
import sys
import functools
import numpy as np
import logging
import multiprocessing
import time
import argparse
import tqdm

blue = '\x1b[38;5;39m'
green = '\033[92m'
reset = '\x1b[0m'

logging._srcfile = None
logger = logging.getLogger()
ch = logging.StreamHandler(sys.stdout)
fmt = U.logutils.CustomFormatter()
ch.setFormatter(fmt)
logging.basicConfig(level=logging.INFO, handlers=[ch])

if __name__ == '__main__':
    counter = None
    lock = None

def init_pool_processes(c, l):
    global counter
    global lock

    counter = c
    lock = l

def simulate_layer(arch : U.Arch, op : U.ops.Operator, sim_kwargs):
    logger.debug(f'Simulating {op}...')
    global counter
    global lock
    sim_kwargs['counter'] = counter
    sim_kwargs['lock'] = lock
    result = U.model.simulate(arch, op, **sim_kwargs)
    logger.debug(f'Finished {op}')
    return result

def log_layer(arch : U.Arch, dtype : U.Dtype, app : U.apps.Trace, i, op : U.ops.Operator, result : U.model.SimResult, total_cyc, time_ns=None, details=True):
    gops = int(op.flops / result.cycles * arch.freq / 1e12)
    eff = np.round(op.flops / result.cycles / arch.ntiles / arch.peak_opc(dtype) * 100, 2)
    cyc_frac = np.round(result.cycles / total_cyc * 100, 2)
    logger.info(f'Layer {i}/{len(app.oplist)}: {op}, {result.cycles} cyc ({cyc_frac} %) (AmI = {np.round(op.ami, 2)}), {green} {gops} TOP/s {reset} ({blue}Efficiency: {eff} %{reset})')

def simulate_app_par(parallel : int, arch : U.Arch, dtype : U.Dtype, app : U.apps.Trace, verbose=True):
    counter = multiprocessing.Value('i', 0)
    lock = multiprocessing.Lock()

    pool = multiprocessing.Pool(
        parallel, initializer=init_pool_processes, initargs=(counter, lock))
    tt0 = time.perf_counter_ns()
    unique_ops = list(app.unique_ops)
    total_steps = sum(U.model.num_steps(arch, op) for op in unique_ops)

    progress = tqdm.tqdm(total=total_steps, unit='steps', smoothing=0.05)

    result = pool.map_async(
        functools.partial(simulate_layer, arch, sim_kwargs={}), unique_ops)

    last = 0
    while not result.ready():
        result.wait(0.5)
        cur = counter.value
        progress.update(cur - last)
        last = cur

    progress.close()
    unique_results = result.get()

    cache = {op: result for op, result in zip(unique_ops, unique_results)}
    tt1 = time.perf_counter_ns()

    total_cyc = 0
    for op in app.oplist: total_cyc += cache[op].cycles

    layers = []
    for i, op in enumerate(app.oplist):
        result = cache[op]
        layers.append(result)
        if verbose: log_layer(arch, dtype, app, i, op, result, total_cyc)

    return tt1 - tt0, layers

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Simulate an application')
    U.arch.arch_cli_params(parser)
    U.apps.workload_cli_params(parser)
    parser.add_argument('-p', '--parallel', type=int, default=1)
    parser.add_argument('-v', '--verbose', action='store_true')
    args = parser.parse_args()

    arch = U.arch.arch_from_cli(args)
    app, trace, batch, dtype = U.apps.workload_from_cli(args)

    logging.info(f'App: {args.app} ({"train" if args.train else "infer"})')
    logging.info(f'Dtype: {dtype}, Batch Size: {batch}')
    logging.info(f'App Ops: {trace.flops / 1e9} G')
    logging.info(f'Arch: {arch}')

    time_ns, layers = simulate_app_par(args.parallel, arch, dtype, trace, args.verbose)
    cycles = sum(result.cycles for result in layers)

    logging.info(f'Summary: (Simulation time: {time_ns / 1e9} s)')
    logging.debug(f'+ Total Latency: {cycles} cyc')
    logging.info(f'+ Throughput: {green}{arch.freq / cycles * batch} samp/sec{reset}, {blue}{trace.flops / cycles / arch.ntiles / arch.peak_opc(dtype) * 100} %{reset}')
    logging.debug(f'+ Compute: {trace.flops / cycles} flops/cyc')
    logging.debug(f'+ Compute: {trace.flops / cycles / arch.ntiles} flops/cyc/core')

    if args.verbose:
        max_lines = max(result.kwstats.get('max_lines', -1) for result in layers)
        if max_lines > 0:
            logger.info(f'+ Max Lines transmitted in one step: {max_lines}')
        tot_lines = max(result.kwstats.get('tot_lines', -1) for result in layers)
        if tot_lines > 0:
            logger.info(f'+ Total Lines transmitted: {tot_lines} ({tot_lines * 2 / 2**20} MB)')
