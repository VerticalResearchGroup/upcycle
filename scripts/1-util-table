#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, 1.0, 1.0, 1.0)
db = U.simdb.SimDb(arch)

print("""
\\begin{tabular}{lrrrr}
 & \\multicolumn{2}{c}{A100}                              & \\multicolumn{2}{c}{\\ourarch}                           \\\\
 & \\multicolumn{1}{c}{Small} & \\multicolumn{1}{c}{Large} & \\multicolumn{1}{c}{Small} & \\multicolumn{1}{c}{Large} \\\\ \\hline
""")

for mode in ['infer', 'train']:
    for i, appname in enumerate(CU.appnames):
        batchnames = ['small', 'large'] if mode == 'train' else ['online', 'offline']
        cols = [
            CU.prettynames[appname] + f' ({mode[0].upper()}) ',
            f'{100 * U.nvdb.get_util(appname, mode, batchnames[0]):.2f} \\%',
            f'{100 * U.nvdb.get_util(appname, mode, batchnames[1]):.2f} \\%',
            f'{100 * db.util(CU.apps[f"{appname}-{mode}-{batchnames[0]}"], arch_ext):.2f} \\%',
            f'{100 * db.util(CU.apps[f"{appname}-{mode}-{batchnames[1]}"], arch_ext):.2f} \\%',
        ]

        print(' & '.join(cols) + ' \\\\')
    print('\hline')

print("""
\\end{tabular}
""")