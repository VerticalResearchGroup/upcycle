#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import numpy as np
import os

apps : dict[str, U.apps.Trace] = {
    'resnet50-infer-online':  U.apps.mlperf_v1_apps['resnet50'].default_infer_online(),
    'resnet50-infer-offline': U.apps.mlperf_v1_apps['resnet50'].default_infer_offline(),
    'resnet50-train-small':   U.apps.mlperf_v1_apps['resnet50'].default_train_small(),
    'resnet50-train-large':   U.apps.mlperf_v1_apps['resnet50'].default_train_large(),

    'ssdrn34-infer-online':  U.apps.mlperf_v1_apps['ssdrn34-1200'].default_infer_online(),
    'ssdrn34-infer-offline': U.apps.mlperf_v1_apps['ssdrn34-1200'].default_infer_offline(),
    'ssdrn34-train-small':   U.apps.mlperf_v1_apps['ssdrn34-300'].default_train_small(),
    'ssdrn34-train-large':   U.apps.mlperf_v1_apps['ssdrn34-300'].default_train_large(),

    'unet-infer-online':  U.apps.mlperf_v1_apps['unet'].default_infer_online(),
    'unet-infer-offline': U.apps.mlperf_v1_apps['unet'].default_infer_offline(),
    'unet-train-small':   U.apps.mlperf_v1_apps['unet'].default_train_small(),
    'unet-train-large':   U.apps.mlperf_v1_apps['unet'].default_train_large(),

    'bert-infer-online':  U.apps.mlperf_v1_apps['bert-large-squad'].default_infer_online(),
    'bert-infer-offline': U.apps.mlperf_v1_apps['bert-large-squad'].default_infer_offline(),
    'bert-train-small':   U.apps.mlperf_v1_apps['bert-large-pretrain'].default_train_small(),
    'bert-train-large':   U.apps.mlperf_v1_apps['bert-large-pretrain'].default_train_large(),

    'rnnt-infer-online':  U.apps.mlperf_v1_apps['rnnt'].default_infer_online(),
    'rnnt-infer-offline': U.apps.mlperf_v1_apps['rnnt'].default_infer_offline(),
    'rnnt-train-small':   U.apps.mlperf_v1_apps['rnnt'].default_train_small(),
    'rnnt-train-large':   U.apps.mlperf_v1_apps['rnnt'].default_train_large(),
}

infer_online = {appname: app for appname, app in apps.items() if appname.endswith('-infer-online')}
infer_offline = {appname: app for appname, app in apps.items() if appname.endswith('-infer-offline')}
train_small = {appname: app for appname, app in apps.items() if appname.endswith('-train-small')}
train_large = {appname: app for appname, app in apps.items() if appname.endswith('-train-large')}

appnames = ['resnet50', 'ssdrn34', 'unet', 'bert', 'rnnt']
appprettynames = ['ResNet50', 'SSD-Resnet34', 'UNet', 'BERT', 'RNN-T']

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, 1.0, 1.0, 1.0)
db = U.simdb.SimDb(arch)

print("""
\\begin{table}[]
\\small
\\centering
\\caption{Comparison of Chip Utilization for \\ourarch vs A100.}
\\label{tab:util-compare}
\\begin{tabular}{lrrrr}
 & \\multicolumn{2}{c}{A100}                              & \\multicolumn{2}{c}{\\ourarch}                           \\\\
 & \\multicolumn{1}{c}{Small} & \\multicolumn{1}{c}{Large} & \\multicolumn{1}{c}{Small} & \\multicolumn{1}{c}{Large} \\\\ \\hline
""")

for mode in ['infer', 'train']:
    for i, appname in enumerate(appnames):
        batchnames = ['small', 'large'] if mode == 'train' else ['online', 'offline']
        cols = [
            appprettynames[i] + f' ({mode[0].upper()}) ',
            f'{100 * U.nvdb.get_util(appname, mode, batchnames[0]):.2f} \\%',
            f'{100 * U.nvdb.get_util(appname, mode, batchnames[1]):.2f} \\%',
            f'{100 * db.util(apps[f"{appname}-{mode}-{batchnames[0]}"], arch_ext):.2f} \\%',
            f'{100 * db.util(apps[f"{appname}-{mode}-{batchnames[1]}"], arch_ext):.2f} \\%',
        ]

        print(' & '.join(cols) + ' \\\\')
    print('\hline')

print("""
\\end{tabular}

\\end{table}
""")