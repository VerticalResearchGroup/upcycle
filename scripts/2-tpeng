#!/usr/bin/env python

from curses import tparm
from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os

arch = U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_notp = U.arch.arch_factory('hier', dict(
    vbits=512,
    tpeng=False,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[1],
    noc_scale=[1]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, CU.base_membw, 1.0, 1.0, 1.0)
db_tp = U.simdb.SimDb(arch)
db_notp = U.simdb.SimDb(arch_notp)

speedups = []
for appname, app in CU.apps.items():
    if 'infer' in appname:
        tp_perf = db_tp.perf(app, arch_ext)
        notp_perf = db_notp.perf(app, arch_ext)
        if tp_perf < notp_perf: tp_perf = notp_perf
        print(f'{appname}:\t{tp_perf}\t{notp_perf}\t{tp_perf / notp_perf}')
        speedups.append(tp_perf / notp_perf)

print()
print(f'Average speedup: {U.stats.geo_mean(speedups)}')
speedups = []
print()
for appname, app in CU.apps.items():
    if 'train' in appname:
        tp_perf = db_tp.perf(app, arch_ext)
        notp_perf = db_notp.perf(app, arch_ext)
        if tp_perf < notp_perf: tp_perf = notp_perf
        print(f'{appname}:\t{tp_perf}\t{notp_perf}\t{tp_perf / notp_perf}')
        speedups.append(tp_perf / notp_perf)

print()
print(f'Average speedup: {U.stats.geo_mean(speedups)}')