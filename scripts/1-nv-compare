#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_notp =  U.arch.arch_factory('hier', dict(
    vbits=512,
    tpeng=False,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, 1.0, 1.0, 1.0)
db = U.simdb.SimDb(arch)
db_notp = U.simdb.SimDb(arch_notp)

fig = plt.figure(figsize=(5, 2.75))
(ilarge, tlarge) = fig.subplots(
    1, 2,
    sharey=True)
    # gridspec_kw={'width_ratios': [len(apps.nv_infer_apps), len(apps.nv_train_apps)]})
BAR_W = 0.44
HEIGHT = 10

print(f'area: {db.area_mm2():.2f} mm2')


def perf(db : U.simdb.SimDb, db_notp : U.simdb.SimDb, app, arch_ext):
    if db.perf(app, arch_ext) > db_notp.perf(app, arch_ext):
        return db.perf(app, arch_ext)
    else:
        return db_notp.perf(app, arch_ext)

def pj_per_op(db : U.simdb.SimDb, db_notp : U.simdb.SimDb, app, arch_ext):
    if db.perf(app, arch_ext) > db_notp.perf(app, arch_ext):
        return db.pj_per_op(app, arch_ext)
    else:
        return db_notp.pj_per_op(app, arch_ext)

def tops_per_mm2(db : U.simdb.SimDb, db_notp : U.simdb.SimDb, app, arch_ext):
    if db.perf(app, arch_ext) > db_notp.perf(app, arch_ext):
        return db.tops_per_mm2(app, arch_ext)
    else:
        return db_notp.tops_per_mm2(app, arch_ext)

def make_plot(ax, apps : dict[str, U.apps.Trace], labels : list[str], mode : str = 'infer', batch : str = 'offline', ylabel=True, legend=True):
    speedup = [
        max(db.perf(apps[appname], arch_ext), db_notp.perf(apps[appname], arch_ext)) / U.nvdb.get_perf(appname.split('-')[0], mode, batch)
        for appname in apps.keys()
    ]

    poweff = [
        U.nvdb.pj_per_op(appname.split('-')[0], mode, batch) / min(db.pj_per_op(apps[appname], arch_ext), db_notp.pj_per_op(apps[appname], arch_ext))
        for appname in apps.keys()
    ]
    # speedup = [
    #     perf(db, db_notp, CU.apps[appname], arch_ext) / U.nvdb.get_perf(appname.split('-')[0], mode, batch)
    #     for appname in apps.keys()
    # ]

    # poweff = [
    #     U.nvdb.pj_per_op(appname.split('-')[0], mode, batch) / pj_per_op(db, db_notp, CU.apps[appname], arch_ext)
    #     for appname in apps.keys()
    # ]

    speedup += [U.stats.geo_mean(speedup)]
    poweff += [U.stats.geo_mean(poweff)]

    print(f'Speedup {mode} {batch}: {speedup}')
    print(f'Power {mode} {batch}: {poweff}')
    print()

    pos = np.arange(len(speedup))
    r1 = ax.bar(pos - BAR_W / 2, speedup, BAR_W, label='Speedup', color='#4E67C8')
    r2 = ax.bar(pos + BAR_W / 2, poweff, BAR_W, label='Rel. Efficiency', color='#5DCEAF')

    for i in range(len(speedup)):
        if speedup[i] > HEIGHT:
            ax.annotate(
                f'{int(speedup[i])}',
                (pos[i] - BAR_W / 2, HEIGHT - 0.75),
                textcoords="offset points",
                xytext=(0, 0),
                ha='center',
                fontsize=10 if speedup[i] < 100 else 7,
                    color='#FFFFFF')

        if poweff[i] > HEIGHT:
            ax.annotate(
                f'{int(poweff[i])}',
                (pos[i] + BAR_W / 2, HEIGHT - 0.75),
                textcoords="offset points",
                xytext=(0, 0),
                ha='center',
                fontsize=10 if poweff[i] < 100 else 7,
                    color='#000000')

    ax.set_xticks(pos)
    ax.set_xticklabels(labels + ['GM'], rotation=45)
    if ylabel:
        ax.set_ylabel('Speedup over A100')

    if legend:
        ax.legend(loc='upper center')

    return r1, r2

labels = [
    CU.shortnames[appname]
    for appname in CU.appnames
]
# make_plot(None, CU.infer_online, CU.appnames, 'infer', 'online', ylabel=True, legend=False)
_, _ = make_plot(ilarge, CU.infer_offline, labels, 'infer', 'offline', ylabel=False, legend=False)
# make_plot(None, CU.train_small, CU.appnames, 'train', 'small', ylabel=False, legend=False)
r1, r2 = make_plot(tlarge, CU.train_large, labels, 'train', 'large', ylabel=False, legend=False)

# ismall.set_xlabel('(a) Small Batch\nInference')
ilarge.set_xlabel('(a) Inference')
# tsmall.set_xlabel('(c) Small Batch\nTraining')
tlarge.set_xlabel('(b) Training')

plt.figlegend(
    [r1, r2],
    ['Speedup', 'Rel. Efficiency'],
    loc='upper center',
    ncol=2)
plt.ylim([0, HEIGHT])
plt.tight_layout()
plt.subplots_adjust(top=0.85)
os.makedirs('./figs', exist_ok=True)
plt.savefig('figs/perf_compare.pdf')
