#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import numpy as np
import os

apps : dict[str, U.apps.Trace] = {
    'resnet50-infer-online':  U.apps.mlperf_v1_apps['resnet50'].default_infer_online(),
    'resnet50-infer-offline': U.apps.mlperf_v1_apps['resnet50'].default_infer_offline(),
    'resnet50-train-small':   U.apps.mlperf_v1_apps['resnet50'].default_train_small(),
    'resnet50-train-large':   U.apps.mlperf_v1_apps['resnet50'].default_train_large(),

    'ssdrn34-infer-online':  U.apps.mlperf_v1_apps['ssdrn34-1200'].default_infer_online(),
    'ssdrn34-infer-offline': U.apps.mlperf_v1_apps['ssdrn34-1200'].default_infer_offline(),
    'ssdrn34-train-small':   U.apps.mlperf_v1_apps['ssdrn34-300'].default_train_small(),
    'ssdrn34-train-large':   U.apps.mlperf_v1_apps['ssdrn34-300'].default_train_large(),

    'unet-infer-online':  U.apps.mlperf_v1_apps['unet'].default_infer_online(),
    'unet-infer-offline': U.apps.mlperf_v1_apps['unet'].default_infer_offline(),
    'unet-train-small':   U.apps.mlperf_v1_apps['unet'].default_train_small(),
    'unet-train-large':   U.apps.mlperf_v1_apps['unet'].default_train_large(),

    'bert-infer-online':  U.apps.mlperf_v1_apps['bert-large-squad'].default_infer_online(),
    'bert-infer-offline': U.apps.mlperf_v1_apps['bert-large-squad'].default_infer_offline(),
    'bert-train-small':   U.apps.mlperf_v1_apps['bert-large-pretrain'].default_train_small(),
    'bert-train-large':   U.apps.mlperf_v1_apps['bert-large-pretrain'].default_train_large(),

    'rnnt-infer-online':  U.apps.mlperf_v1_apps['rnnt'].default_infer_online(),
    'rnnt-infer-offline': U.apps.mlperf_v1_apps['rnnt'].default_infer_offline(),
    'rnnt-train-small':   U.apps.mlperf_v1_apps['rnnt'].default_train_small(),
    'rnnt-train-large':   U.apps.mlperf_v1_apps['rnnt'].default_train_large(),
}

infer_online = {appname: app for appname, app in apps.items() if appname.endswith('-infer-online')}
infer_offline = {appname: app for appname, app in apps.items() if appname.endswith('-infer-offline')}
train_small = {appname: app for appname, app in apps.items() if appname.endswith('-train-small')}
train_large = {appname: app for appname, app in apps.items() if appname.endswith('-train-large')}

appnames = ['resnet50', 'ssdrn34', 'unet', 'bert', 'rnnt']

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, 1.0, 1.0, 1.0)
db = U.simdb.SimDb(arch)

fig = plt.figure(figsize=(12, 3.5))
(ismall, ilarge, tsmall, tlarge) = fig.subplots(
    1, 4,
    sharey=True)
    # gridspec_kw={'width_ratios': [len(apps.nv_infer_apps), len(apps.nv_train_apps)]})
BAR_W = 0.44
HEIGHT = 10

print(f'area: {db.area_mm2():.2f} mm2')


def make_plot(ax, apps : dict[str, U.apps.Trace], labels : list[str], mode : str = 'infer', batch : str = 'offline', ylabel=True, legend=True):
    speedup = [
        db.perf(apps[appname], arch_ext) / U.nvdb.get_perf(appname.split('-')[0], mode, batch)
        for appname in apps.keys()
    ]

    poweff = [
        U.nvdb.pj_per_op(appname.split('-')[0], mode, batch) / db.pj_per_op(apps[appname], arch_ext)
        for appname in apps.keys()
    ]

    print(f'{mode} {batch}: {speedup}')
    print(f'{mode} {batch}: {poweff}')

    speedup += [U.stats.geo_mean(speedup)]
    poweff += [U.stats.geo_mean(poweff)]

    pos = np.arange(len(speedup))
    r1 = ax.bar(pos - BAR_W / 2, speedup, BAR_W, label='Speedup', color='#5DCEAF')
    r2 = ax.bar(pos + BAR_W / 2, poweff, BAR_W, label='Rel. Efficiency', color='#4E67C8')

    for i in range(len(speedup)):
        if speedup[i] > HEIGHT:
            ax.annotate(
                f'{int(speedup[i])}',
                (pos[i] - BAR_W / 2, HEIGHT - 0.75),
                textcoords="offset points",
                xytext=(0, 0),
                ha='center',
                fontsize=10 if speedup[i] < 100 else 7,
                color='#000000')

        if poweff[i] > HEIGHT:
            ax.annotate(
                f'{int(poweff[i])}',
                (pos[i] + BAR_W / 2, HEIGHT - 0.75),
                textcoords="offset points",
                xytext=(0, 0),
                ha='center',
                fontsize=10 if poweff[i] < 100 else 7,
                color='#FFFFFF')

    ax.set_xticks(pos)
    ax.set_xticklabels(labels + ['geomean'], rotation=90)
    if ylabel:
        ax.set_ylabel('Speedup over A100')

    if legend:
        ax.legend(loc='upper center')


make_plot(ismall, infer_online, appnames, 'infer', 'online', ylabel=True, legend=False)
make_plot(ilarge, infer_offline, appnames, 'infer', 'offline', ylabel=False, legend=False)
make_plot(tsmall, train_small, appnames, 'train', 'small', ylabel=False, legend=False)
make_plot(tlarge, train_large, appnames, 'train', 'large', ylabel=False, legend=False)

ismall.set_xlabel('(a) Small Batch\nInference')
ilarge.set_xlabel('(b) Large Batch\nInference')
tsmall.set_xlabel('(c) Small Batch\nTraining')
tlarge.set_xlabel('(d) Large Batch\nTraining')

ilarge.legend(loc='upper right', borderaxespad=-0.1, framealpha=1.0)
plt.ylim([0, HEIGHT])
plt.tight_layout()
os.makedirs('./figs', exist_ok=True)
plt.savefig('figs/perf_compare.pdf')
