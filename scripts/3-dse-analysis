#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os

colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']

arch_cfgs = [
    (256, 1024),
    (256, 2048),
    (256, 4096),
    (512, 1024),
    (512, 2048),
    (512, 4096),
]

freqs = list(range(int(1.0e9), int(3.0e9), int(100e6)))
fig = plt.figure(figsize=(14, 5))
axs = fig.subplots(2, len(CU.appnames))
plt.subplots_adjust(wspace=0.5)

for c, appname in enumerate(CU.appnames):
    for r, mode in enumerate(['infer', 'train']):
        batch = 'offline' if mode == 'infer' else 'large'
        app = CU.apps[f'{appname}-{mode}-{batch}']

        base_pow = None
        base_area = None

        best_cfg = None
        best_pow = None
        best_area = None

        for i, (vbits, ncores) in enumerate(arch_cfgs):
            pj_per_op = []
            tops_per_mm2 = []

            arch =  U.arch.arch_factory('hier', dict(
                vbits=vbits,
                geom=U.arch.ntiles_to_geom(ncores),
                compute_scale=[0.5, 1, 2, 10, 100, 0],
                noc_scale=[0.5, 1, 2, 10, 100, 0]))

            db = U.simdb.cached_simdb(arch)

            for freq in freqs:
                arch_ext = U.simdb.ArchExtConfig(freq, 900 * 2**30)
                pj_per_op.append(db.pj_per_op(app, arch_ext))
                tops_per_mm2.append(db.tops_per_mm2(app, arch_ext))

                if vbits == 512 and ncores == 2048 and freq == 2.4e9:
                    base_pow = db.pj_per_op(app, arch_ext)
                    base_area = db.tops_per_mm2(app, arch_ext)

                peak_ops = ncores * vbits / 8 * 2 * freq

                # if np.abs(peak_ops - 624e12) / 624e12 > 0.05: continue

                if best_pow is None or db.pj_per_op(app, arch_ext) < best_pow:
                    best_pow = db.pj_per_op(app, arch_ext)
                    best_area = db.tops_per_mm2(app, arch_ext)
                    best_cfg = (vbits, ncores, freq)

        (vbits, ncores, freq) = best_cfg
        peak_ops = ncores * vbits / 8 * 2 * freq

        print(f'{appname}-{mode}-{batch}:\t {vbits}-bit\t {ncores}-core\t {freq/1e9:.2f}GHz\t {peak_ops/1e12:.2f} TOPS\t area_ratio = {best_area / base_area:.2f}\t power_ratio = {best_pow / base_pow:.2f}')