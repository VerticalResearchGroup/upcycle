#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os
import itertools
import functools

@functools.singledispatch
def op_short_str(op): return '' #raise NotImplementedError()

def short_dtype(dtype): return ''
    # return 'I8' if dtype == U.Dtype.I8 else 'F16'

@op_short_str.register
def _(op : U.ops.Conv):
    si = f'{op.si[0]}$^{op.d}$'
    return f'I{short_dtype(op.dtype)} {si} {op.c}-\\textgreater{{}}{op.k} f={op.sf[0]} s{op.stride}'

@op_short_str.register
def _(op : U.ops.Matmul):
    layout = U.ops.Matmul.layout_str(op.tr_a, op.tr_b)
    return f'I{short_dtype(op.dtype)} Mm({op.m}x{op.n}x{op.k})'

@op_short_str.register
def _(op : U.ops.Linear):
    layout = U.ops.Linear.layout_str(op.tr_a, op.tr_b)
    return f'I{short_dtype(op.dtype)} Fc({op.m}x{op.n}x{op.k})'

@op_short_str.register
def _(op : U.ops.LstmCell):
    layout = U.ops.Linear.layout_str(op.mm.tr_a, op.mm.tr_b)
    return f'I{short_dtype(op.dtype)} Lstm({op.mm.m}x{op.mm.n}x{op.mm.k})'

@op_short_str.register
def _(op : U.apps.TrainOp):
    return 'T' + op_short_str(op.fwd_op)[1:]


arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_notp =  U.arch.arch_factory('hier', dict(
    vbits=512,
    tpeng=False,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

db = U.simdb.SimDb(arch)
db_notp = U.simdb.SimDb(arch_notp)
nv = U.nvdb.NvDb()

ti = 0
tags = [
    # Resnet50
    ['SS', 'LC'],
    ['LS', 'SC'],
    ['SS'], # 'Larger spatial => A100 better'],
    ['F1', 'LC', 'A-'],
    ['SS', 'BP'],

    ['DW', 'SS'],
    ['DW', 'LS', 'SC'],
    ['DW', 'LS', 'SC'],
    ['DW', 'F1', 'LC'],
    ['DW', 'F1', 'LC'], # 'Flipped CK better'],

    # SSDRN34
    ['LS', 'LC', 'GP'],
    ['LS', 'LC'],
    ['LS'],
    ['LS', 'LC'],
    ['S2'],

    ['DW', 'SS', 'LC'],
    ['DW', 'SS', 'LC'],
    ['DW', 'SS', 'LC'],
    ['DW', 'SS', 'LC'],
    ['DW', 'SS', 'LC'],

    # UNET
    ['BP', 'LS', 'SC'],
    ['BP', 'LS', 'SC'],
    ['BP', 'LS', 'SC'], # 'Larger KxC is better'],
    ['BP', 'LS', 'LC'],
    ['BP', 'LS', 'LC'], # 'Large KxC compensates'],

    ['DW', 'LS', 'SC'],
    ['DW', 'LS', 'SC'],
    ['DW', 'LS', 'SC'],
    ['DW', 'LS', 'LC'],
    ['DW', 'LS', 'LC'],

    # BERT
    ['LM', 'LN', 'LK'],
    ['LM', 'LN', 'LK'], # '4x N => TC way better'],
    ['LM', 'LN', 'LK'],
    ['LL', 'SM', 'SN'],
    ['LL', 'SM', 'SN'],

    ['TP', 'LM', 'LN', 'LK'],
    ['TP', 'LM', 'LN', 'LK'],
    ['TP', 'LM', 'LN', 'LK'],
    ['TP', 'LL', 'SM', 'SN'],
    ['TP', 'LL', 'SM', 'SN'],

    # RNNT
    ['EW', 'LN', 'LK'],
    ['EW', 'LN', 'LK'],
    ['EW', 'LN', 'LK'],
    ['EW', 'SK'],
    ['EW', 'BP'],

    ['TP', 'EW', 'LN', 'LK'],
    ['TP', 'EW', 'LN', 'LK'],
    ['TP', 'EW', 'LN', 'LK'],
    ['TP', 'EW', 'SK'],
    ['TP', 'EW', ],
]

mask = [
    # Resnet50
    True,
    True,
    True,
    True,
    True,

    True,
    True,
    True,
    True,
    True,

    # SSDRN34
    True,
    True,
    True,
    True,
    True,

    True,
    True,
    True,
    True,
    True,

    # UNET
    True,
    True,
    True,
    True,
    True,

    True,
    True,
    True,
    True,
    True,

    # BERT
    True,
    True,
    True,
    True,
    True,

    True,
    True,
    True,
    True,
    True,

    # RNNT
    True,
    True,
    True,
    True,
    True,

    True,
    True,
    True,
    True,
    True,
]

def process_tag(tag):
    if len(tag) == 2:
        return f'\\tag{{{tag}}}'
    else:
        return tag

ni = 1

def analyze_app(db : U.simdb.SimDb, iapp : U.apps.Trace, tapp : U.apps.Trace):
    global ti
    global ni
    arch_ext =      U.simdb.ArchExtConfig(2.4e9, CU.base_membw, 1.0, 1.0, 1.0)
    arch_ext_ex =   U.simdb.ArchExtConfig(2.4e9, CU.base_membw, 2.0, 1.0, 1.0)
    arch_ext_comm = U.simdb.ArchExtConfig(2.4e9, CU.base_membw, 1.0, 2.0, 1.0)
    arch_ext_mem =  U.simdb.ArchExtConfig(2.4e9, CU.base_membw, 1.0, 1.0, 2.0)

    lines = [[] for _ in range(10)]

    for ii, app in enumerate([iapp, tapp]):
        total_lat = db.lat(app, arch_ext)

        ex2_speedup = total_lat / db.lat(app, arch_ext_ex)
        comm2_speedup = total_lat / db.lat(app, arch_ext_comm)
        mem2_speedup = total_lat / db.lat(app, arch_ext_mem)
        speedups = [ex2_speedup, comm2_speedup, mem2_speedup]
        best_speedup = max(ex2_speedup, comm2_speedup, mem2_speedup)

        if best_speedup == ex2_speedup: sens = 'ex'
        elif best_speedup == comm2_speedup: sens = 'comm'
        elif best_speedup == mem2_speedup: sens = 'mem'

        unique_ops = list(app.unique_ops)
        counts = [app.count(op) for op in unique_ops]
        contrib = [counts[i] * unique_ops[i].flops / app.flops for i in range(len(unique_ops))]

        ops = sorted(list(zip(unique_ops, counts, contrib)), key=lambda x: x[2], reverse=True)

        for i, (op, count, contrib) in enumerate(ops[:5]):
            ld = db[op, arch_ext]
            util = max(db[op, arch_ext].util, db_notp[op, arch_ext].util)
            # print(op)
            cols = [
                # f'{ni}',
                op_short_str(op),
                f'{op.ami:.0f}',
                f'{int(util * 100)}\\%',
                f'{int(nv[op, None].util * 100)}\\%',
                ' '.join(map(process_tag, tags[ti])),
            ]
            if mask[ti]:
                lines[i + ii*5] += cols
                ni += 1

            ti += 1

    for line in lines:
        print(' & '.join(line) + ' \\\\')

print("""
\\begin{tabular}{lrrrl}
\\hline
\\multicolumn{1}{c}{\\textbf{Op}} & \\textbf{AMI} & \\textbf{G7} & \\multicolumn{1}{c}{\\textbf{A100}} & \\multicolumn{1}{c}{\\textbf{Comments}} \\\\ \\hline
""")

prettynames = {
    'resnet50': 'Resnet50 (All 2D Conv.)',
    'ssdrn34': 'SSD-Resnet34 (All 2D Conv.)',
    'unet': 'UNet (All 3D Conv.)',
    'bert': 'BERT-Large',
    'rnnt': 'RNN-T'
}

for appname in CU.appnames:
    # for mode in ['infer', 'train']:
        # ibatch = {
        #     ('infer', False): 'online',
        #     ('infer', True): 'offline',
        #     ('train', False): 'small',
        #     ('train', True): 'large',
        # }[('infer', True)]
    iapp = CU.apps[f'{appname}-infer-offline']
    tapp = CU.apps[f'{appname}-train-large']

    tapp = U.apps.post_process_train_app(tapp)

    # print(f'{appname}-{mode}-{batch}')
    # print()
    # if mode == 'infer':
    prettyname = prettynames[appname]
    print(f'\\multicolumn{{5}}{{c}}{{\\textbf{{{prettyname}}}}} \\\\ \\hline')

    analyze_app(db, iapp, tapp)
    # if mode == 'train':
    print('\\hline')




print("\\end{tabular}")

