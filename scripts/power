#!/usr/bin/env python

import sys
from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os
import logging

ncores = int(sys.argv[1])
variants = ['infer-offline', 'train-large']

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(ncores),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_notp =  U.arch.arch_factory('hier', dict(
    vbits=512,
    tpeng=False,
    geom=U.arch.ntiles_to_geom(ncores),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, CU.base_membw, 1.0, 1.0, 1.0)
db = U.simdb.SimDb(arch, node=12, num_hbms=2)
db_notp = U.simdb.SimDb(arch_notp, node=12, num_hbms=2)
# nv = U.nvdb.NvDb()

app = CU.apps['rnnt-train-large']
app_pp = U.apps.post_process_train_app(app)

our_utils = [
    max(db[op, arch_ext].util, db_notp[op, arch_ext].util)
    for op in app_pp.unique_ops
]
# nv_utils = [nv[op, None].util for op in app_pp.unique_ops]

def watts(op):
    return max(
        db[op, arch_ext].tot_energy_j / db[op, arch_ext].tot_lat,
        db_notp[op, arch_ext].tot_energy_j / db_notp[op, arch_ext].tot_lat)

def app_watts(app, db):
    tot_j = sum(db[op, arch_ext].tot_energy_j for op in app)
    tot_t = sum(db[op, arch_ext].tot_lat for op in app)
    return tot_j / tot_t

for appname, app in CU.apps.items():
    app_max_w = max(watts(op) for op in app)

    app_avg_w = max(app_watts(app, db), app_watts(app, db_notp))

    print(f'{appname} {app_max_w:.2f} {app_avg_w:.2f}')

    print()