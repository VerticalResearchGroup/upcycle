#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os

fig = plt.figure(figsize=(12, 3.5))
ax = fig.subplots(1, 1)
    # gridspec_kw={'width_ratios': [len(apps.nv_infer_apps), len(apps.nv_train_apps)]})
BAR_W = 1
HEIGHT = 100
SCALES = [1, 10, 100]
XLIM = (len(SCALES) + 1) * len(SCALES) * len(SCALES) - 1

arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, 1.0, 1.0, 1.0)
db = U.simdb.cached_simdb(arch)

refperf = {
    appname: db.perf(app, arch_ext)
    for appname, app in CU.apps.items()
}


plt.plot([0, XLIM], [1, 1], 'k--')


for i, compute_x in enumerate(SCALES):
    ys = []
    for mem_x in SCALES:
        for noc_x in SCALES:
            arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, compute_x, noc_x, mem_x)
            ys.append(U.stats.geo_mean([
                db.perf(app, arch_ext) / refperf[appname]
                for appname, app in CU.apps.items()
            ]))

    print(f'{compute_x}\t{[np.round(y, 2) for y in ys]}')
    xs = np.arange(len(ys)) * (len(SCALES) + 1) + 1 / 2 + i
    compute_x_str = r'$\infty$' if compute_x == 0 else f'{compute_x}'
    ax.bar(xs, ys, BAR_W, label=f'Ex={compute_x_str}x')

i = 0
xticklabels = []
for mem_x in SCALES:
    for noc_x in SCALES:
        mem_x_str = r'$\infty$' if mem_x == 0 else f'{mem_x}'
        noc_x_str = r'$\infty$' if noc_x == 0 else f'{noc_x}'
        xticklabels.append(f'NoC={noc_x_str}x\nMem={mem_x_str}x')
        i += 1

# plt.ylim([0, HEIGHT])
plt.yscale('log')
plt.ylabel('Speedup over Baseline')
ax.set_xticks(
    np.arange(len(SCALES) * len(SCALES)) * (len(SCALES) + 1) + (len(SCALES) + 1) / 2 - 0.5)
ax.set_xticklabels(xticklabels, rotation=0, fontsize=8)


plt.xlabel('Noc / Mem Scale Factors')
plt.legend(loc='upper left', fontsize=8)
plt.xlim([0, XLIM])
plt.tight_layout()
os.makedirs('./figs', exist_ok=True)
plt.savefig('figs/sensitivity.pdf')
