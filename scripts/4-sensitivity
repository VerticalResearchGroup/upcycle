#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import numpy as np
import os

apps : dict[str, U.apps.Trace] = {
    'resnet50-infer-online':  U.apps.mlperf_v1_apps['resnet50'].default_infer_online(),
    'resnet50-infer-offline': U.apps.mlperf_v1_apps['resnet50'].default_infer_offline(),
    'resnet50-train-small':   U.apps.mlperf_v1_apps['resnet50'].default_train_small(),
    'resnet50-train-large':   U.apps.mlperf_v1_apps['resnet50'].default_train_large(),

    'ssdrn34-infer-online':  U.apps.mlperf_v1_apps['ssdrn34-1200'].default_infer_online(),
    'ssdrn34-infer-offline': U.apps.mlperf_v1_apps['ssdrn34-1200'].default_infer_offline(),
    'ssdrn34-train-small':   U.apps.mlperf_v1_apps['ssdrn34-300'].default_train_small(),
    'ssdrn34-train-large':   U.apps.mlperf_v1_apps['ssdrn34-300'].default_train_large(),

    'unet-infer-online':  U.apps.mlperf_v1_apps['unet'].default_infer_online(),
    'unet-infer-offline': U.apps.mlperf_v1_apps['unet'].default_infer_offline(),
    'unet-train-small':   U.apps.mlperf_v1_apps['unet'].default_train_small(),
    'unet-train-large':   U.apps.mlperf_v1_apps['unet'].default_train_large(),

    'bert-infer-online':  U.apps.mlperf_v1_apps['bert-large-squad'].default_infer_online(),
    'bert-infer-offline': U.apps.mlperf_v1_apps['bert-large-squad'].default_infer_offline(),
    'bert-train-small':   U.apps.mlperf_v1_apps['bert-large-pretrain'].default_train_small(),
    'bert-train-large':   U.apps.mlperf_v1_apps['bert-large-pretrain'].default_train_large(),

    'rnnt-infer-online':  U.apps.mlperf_v1_apps['rnnt'].default_infer_online(),
    'rnnt-infer-offline': U.apps.mlperf_v1_apps['rnnt'].default_infer_offline(),
    'rnnt-train-small':   U.apps.mlperf_v1_apps['rnnt'].default_train_small(),
    'rnnt-train-large':   U.apps.mlperf_v1_apps['rnnt'].default_train_large(),
}

infer_online = {appname: app for appname, app in apps.items() if appname.endswith('-infer-online')}
infer_offline = {appname: app for appname, app in apps.items() if appname.endswith('-infer-offline')}
train_small = {appname: app for appname, app in apps.items() if appname.endswith('-train-small')}
train_large = {appname: app for appname, app in apps.items() if appname.endswith('-train-large')}

appnames = ['resnet50', 'ssdrn34', 'unet', 'bert', 'rnnt']


fig = plt.figure(figsize=(12, 3.5))
ax = fig.subplots(1, 1)
    # gridspec_kw={'width_ratios': [len(apps.nv_infer_apps), len(apps.nv_train_apps)]})
BAR_W = 1
HEIGHT = 100
SCALES = [1, 10, 100, 0]


arch =  U.arch.arch_factory('hier', dict(
    vbits=512,
    geom=U.arch.ntiles_to_geom(2048),
    compute_scale=[0.5, 1, 2, 10, 100, 0],
    noc_scale=[0.5, 1, 2, 10, 100, 0]))

arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, 1.0, 1.0, 1.0)
db = U.simdb.cached_simdb(arch)

refperf = {
    appname: db.perf(app, arch_ext)
    for appname, app in apps.items()
}


plt.plot([0, 25 * 6], [1, 1], 'k--')


for i, compute_x in enumerate(SCALES):
    ys = []
    for mem_x in SCALES:
        for noc_x in SCALES:
            arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30, compute_x, noc_x, mem_x)
            ys.append(U.stats.geo_mean([
                db.perf(app, arch_ext) / refperf[appname]
                for appname, app in apps.items()
            ]))

    print(f'{compute_x}\t{ys}')
    xs = np.arange(len(ys)) * (len(SCALES) + 1) + 1 / 2 + i
    compute_x_str = r'$\infty$' if compute_x == 0 else f'{compute_x}'
    ax.bar(xs, ys, BAR_W, label=f'Ex={compute_x_str}x')

i = 0
xticklabels = []
for mem_x in SCALES:
    for noc_x in SCALES:
        mem_x_str = r'$\infty$' if mem_x == 0 else f'{mem_x}'
        noc_x_str = r'$\infty$' if noc_x == 0 else f'{noc_x}'
        xticklabels.append(f'NoC={noc_x_str}x\nMem={mem_x_str}x')
        i += 1

# plt.ylim([0, HEIGHT])
plt.yscale('log')
plt.ylabel('Speedup over Baseline')
ax.set_xticks(
    np.arange(len(SCALES) * len(SCALES)) * (len(SCALES) + 1) + (len(SCALES) + 1) / 2 - 0.5)
ax.set_xticklabels(xticklabels, rotation=0, fontsize=8)


plt.xlabel('Noc / Mem Scale Factors')
plt.legend(loc='upper left', fontsize=8)
plt.xlim([0, (len(SCALES) + 1) * len(SCALES) * len(SCALES) - 1])
plt.tight_layout()
os.makedirs('./figs', exist_ok=True)
plt.savefig('figs/sensitivity.pdf')
