#!/usr/bin/env python

from matplotlib import pyplot as plt
import upcycle as U
import upcycle.chartutils as CU
import numpy as np
import os

colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']

arch_cfgs = [
    (256, 1024),
    (256, 2048),
    (256, 4096),
    (512, 1024),
    (512, 2048),
    (512, 4096),
    # (512, 3840),
]

freqs = list(range(int(1.0e9), int(3.0e9), int(100e6)))
fig = plt.figure(figsize=(14, 5))
axs = fig.subplots(2, len(CU.appnames))
plt.subplots_adjust(wspace=0.5)

for c, appname in enumerate(CU.appnames):
    for r, mode in enumerate(['infer', 'train']):
        batch = 'offline' if mode == 'infer' else 'large'
        app = CU.apps[f'{appname}-{mode}-{batch}']

        for i, (vbits, ncores) in enumerate(arch_cfgs):
            pj_per_op = []
            tops_per_mm2 = []

            arch =  U.arch.arch_factory('hier', dict(
                vbits=vbits,
                geom=U.arch.ntiles_to_geom(ncores),
                compute_scale=[0.5, 1, 2, 10, 100, 0],
                noc_scale=[0.5, 1, 2, 10, 100, 0]))

            arch_notp =  U.arch.arch_factory('hier', dict(
                vbits=vbits,
                geom=U.arch.ntiles_to_geom(ncores),
                compute_scale=[0.5, 1, 2, 10, 100, 0],
                noc_scale=[0.5, 1, 2, 10, 100, 0]))

            db = U.simdb.cached_simdb(arch, node=12, num_hbms=2)
            db_notp = U.simdb.cached_simdb(arch_notp, node=12, num_hbms=2)

            print(f'{ncores} cores, {vbits}-bit: {db.area_mm2()} mm2')

            for freq in freqs:
                arch_ext = U.simdb.ArchExtConfig(freq, CU.base_membw)
                if db.perf(app, arch_ext) > db_notp.perf(app, arch_ext):
                    pj_per_op.append(db.pj_per_op(app, arch_ext))
                    tops_per_mm2.append(db.tops_per_mm2(app, arch_ext))
                else:
                    pj_per_op.append(db_notp.pj_per_op(app, arch_ext))
                    tops_per_mm2.append(db_notp.tops_per_mm2(app, arch_ext))

            axs[r, c].scatter(
                tops_per_mm2,
                pj_per_op,
                label=f'{ncores}c / {vbits}v' if (r, c) == (0, 0) else '_nolegend_',
                s=5,
                color=colors[i])


for c, appname in enumerate(CU.appnames):
    for r, mode in enumerate(['infer', 'train']):
        batch = 'offline' if mode == 'infer' else 'large'
        app = CU.apps[f'{appname}-{mode}-{batch}']

        arch =  U.arch.arch_factory('hier', dict(
            vbits=512,
            geom=U.arch.ntiles_to_geom(2048),
            compute_scale=[0.5, 1, 2, 10, 100, 0],
            noc_scale=[0.5, 1, 2, 10, 100, 0]))

        db = U.simdb.cached_simdb(arch)
        arch_ext = U.simdb.ArchExtConfig(2.4e9, 900 * 2**30)

        axs[r, c].scatter(
            [db.tops_per_mm2(app, arch_ext)],
            [db.pj_per_op(app, arch_ext)],
            label=f'G2048' if (r, c) == (0, 0) else '_nolegend_',
            s=12,
            marker='^',
            color='black')

for app_i in range(len(CU.appnames)):
    net_name = CU.appnames[app_i]
    axs[1, app_i].set_xlabel(f'TOP/s / mm^2\n{net_name}')

for mode_j in range(2):
    mode = ['Infer', 'Train'][mode_j]
    axs[mode_j, 0].set_ylabel(f'{mode} - pJ/op')

axs[0,0].legend(
    loc='upper left',
    bbox_to_anchor=(-0.2, 1.3),
    ncol=len(arch_cfgs) + 1,
    markerscale=3)

plt.tight_layout()
os.makedirs('./figs', exist_ok=True)
plt.savefig('figs/dse.pdf', bbox_inches='tight')
