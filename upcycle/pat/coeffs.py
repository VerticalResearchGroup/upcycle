from dataclasses import dataclass

@dataclass(frozen=True, order=True)
class Coeffs:
    ad3 : float
    ad2 : float
    ad1 : float
    ad0 : float
    ae2 : float
    ae1 : float
    ae0 : float
    ap2 : float
    ap1 : float
    ap0 : float

coeff_table = {
    'bulk': {
        180: Coeffs(0, 97.09, -356.7, 406.5, 0, 24.64, -17.98, 0, 101000, -79720),
        130: Coeffs(-76.65, 334.9, -493.4, 275.8, 7.171, -6.709, 2.904, 27020, -15450, 5630),
        90: Coeffs(-60.34, 262.5, -384.2, 210.9, 4.762, -4.781, 2.092, 17320, -11230, 4328),
        65: Coeffs(-53.3, 230.4, -333.9, 178.6, 3.755, -4.398, 1.975, 12890, -10510, 4362)
    },
    'hkhp': {
        45: Coeffs(-501.6, 1567, -1619, 566.1, 1.018, -0.3107, 0.1539, 5462, -1760, 522.4),
        32: Coeffs(-1047, 2982, -2797, 873.5, 0.8367, -0.4341, 0.1701, 4001, -1733, 533.6)
    },
    'hklp': {
        45: Coeffs(-285.7, 1239, -1795, 898.8, 1.103, -0.362, 0.2767, 6297, -3009, 1124),
        32: Coeffs(-325.9, 1374, -1922, 913.2, 0.9559, -0.7823, 0.471, 4557, -3037, 1323)
    },
    'mghp': {
        20: Coeffs(0, 34.63, -66.37, 41.15, 0.373, -0.1582, 0.04104, 2922, -1286, 299.9),
        16: Coeffs(0, 24.8, -47.52, 28.87, 0.2958, -0.1241, 0.03024, 2133, -882.6, 197.7),
        14: Coeffs(-40.66, 109.2, -100.6, 35.92, 0.2363, -0.09675, 0.02239, 1675, -711, 159),
        10: Coeffs(-34.95, 93.65, -85.99, 30.4, 0.2068, -0.09311, 0.02375, 1456, -621.6, 143.8),
        7: Coeffs(-28.58, 76.6, -70.26, 24.69, 0.1776, -0.09097, 0.02447, 1179, -515.7, 123.4)
    },
    'mglstp': {
        20: Coeffs(-160.5, 514.1, -558.6, 217.5, 0.2632, -0.14, 0.06841, 2096, -962.4, 287.1),
        16: Coeffs(-114.6, 366.7, -397.4, 153.6, 0.2139, -0.1187, 0.05639, 1609, -715.5, 205.7),
        14: Coeffs(-85.37, 271.6, -292.2, 111.4, 0.1556, -0.06472, 0.03066, 1259, -554.1, 152.3),
        10: Coeffs(-71.76, 228.6, -246.3, 93.91, 0.1261, -0.0518, 0.02769, 1046, -422.7, 118.9),
        7: Coeffs(-61.79, 196.1, -210.3, 79.55, 0.09365, -0.03409, 0.02043, 815.2, -307.3, 87.54)
    }
}

default_type_map = {
    180: 'bulk',
    130: 'bulk',
    90: 'bulk',
    65: 'bulk',
    45: 'hkhp',
    32: 'hkhp',
    20: 'mghp',
    16: 'mghp',
    14: 'mghp',
    10: 'mghp',
    7: 'mghp'
}

default_v_map = {
    180: 1.8,
    130: 1.2,
    90: 1.1,
    65: 1.1,
    45: 1.1,
    32: 0.97,
    20: 0.9,
    16: 0.86,
    14: 0.86,
    10: 0.83,
    7: 0.8
}

def area_factors(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11):
    return {
        180: f1,
        130: f2,
        90: f3,
        65: f4,
        45: f5,
        32: f6,
        20: f7,
        16: f8,
        14: f9,
        10: f10,
        7: f11
    }

area_scale_factors = {
    180: area_factors(1, 0.34, 0.15, 0.08, 0.053, 0.025, 0.011, 0.01, 0.0093, 0.0055, 0.0032),
    130: area_factors(2.9, 1, 0.44, 0.23, 0.16, 0.072, 0.033, 0.03, 0.027, 0.016, 0.0092),
    90: area_factors(6.6, 2.3, 1, 0.53, 0.35, 0.16, 0.075, 0.067, 0.061, 0.036, 0.021),
    65: area_factors(12, 4.3, 1.9, 1, 0.66, 0.31, 0.14, 0.13, 0.12, 0.068, 0.039),
    45: area_factors(19, 6.4, 2.8, 1.5, 1, 0.46, 0.21, 0.19, 0.17, 0.1, 0.059),
    32: area_factors(40, 14, 6.1, 3.3, 2.2, 1, 0.46, 0.41, 0.38, 0.22, 0.13),
    20: area_factors(88, 30, 13, 7.1, 4.7, 2.2, 1, 0.89, 0.82, 0.48, 0.28),
    16: area_factors(99, 34, 15, 7.9, 5.3, 2.4, 1.1, 1, 0.91, 0.54, 0.31),
    14: area_factors(110, 37, 16, 8.7, 5.8, 2.7, 1.2, 1.1, 1, 0.59, 0.34),
    10: area_factors(180, 63, 28, 15, 9.8, 4.5, 2.1, 1.9, 1.7, 1, 0.58),
    7: area_factors(320, 110, 48, 25, 17, 7.8, 3.6, 3.2, 2.9, 1.7, 1)
}

def coeffs(node): return coeff_table[default_type_map[node]][node]

def delayfactor(node : int, v : float = None):
    c = coeffs(node)
    v = v if v is not None else default_v_map[node]
    return c.ad3 * v**3 + c.ad2 * v**2 + c.ad1 * v + c.ad0

def energyfactor(node : int, v : float = None):
    c = coeffs(node)
    v = v if v is not None else default_v_map[node]
    return c.ae2 * v**2 + c.ae1 * v + c.ae0

def powerfactor(node : int, v : float = None):
    c = coeffs(node)
    v = v if v is not None else default_v_map[node]
    return c.ap2 * v**2 + c.ap1 * v + c.ap0
